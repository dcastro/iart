/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Display.java
 *
 * Created on 11/Abr/2011, 15:38:02
 */

package iart;

import java.util.Vector;
import javax.swing.JScrollPane;
import org.jgraph.JGraph;

/**
 *
 * @author Diogo
 */
public class Display extends javax.swing.JFrame {
    
    public double ticket_price;

    public static Vector<BusStop> busStops = new Vector<BusStop>();
    public static Vector<String> buses = new Vector<String>();
    public static MyGraph mg = new MyGraph();
    public static JGraph jgraph;

    /** Creates new form Display */
    public Display() {

        Config c = new Config();
        c.load();
        printFrames();
        //graph

        initGraph();

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane(jgraph);
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("STCP");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = buses.toArray(new String[0]);//{ "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jLabel1.setText("Autocarros:");

        jButton2.setText("Visualizar Rota");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Ver todas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:        
        displayRoute(jList1.getAnchorSelectionIndex());
        System.out.println("Selected Bus no.: " + jList1.getAnchorSelectionIndex());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        displayRoute(-1);
        System.out.println("Displaying all routes.");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display().setVisible(true);
            }
        });
        
        

        //mg.show(true);

        jgraph = mg.getJGraph();

        //displayRoute(-1);

        //System.out.println(jFrame2 == null);


    }




    /**
     * Mostra no grafo o trajecto do autocarro na posição 'index'
     * Mostra todos os trajectos se index = -1
     * @param index: posiçao do autocarro cujo trajecto se pretende mostrar
     */
    public static void displayRoute(int index) {
        if (index < -1 || index >= buses.size()) {
            return;
        }

        if (index == -1) {
            mg.resetEdges();
            
            for (int i = 0; i < busStops.size(); i++) {
                String origin = busStops.get(i).getName();
                Vector<String> neighbors = busStops.get(i).getNeighbors();

                for (int j = 0; j < neighbors.size(); j++) {
                    mg.addEdge(origin, neighbors.get(j));
                }

            }
            return;
        }

        String busID = buses.get(index);
        Vector<String> route = new Vector<String>();

        //encontrar o ponto de partida do autocarro
        for (int i = 0; i < busStops.size(); i++) {
            if (busStops.get(i).isBusFirstStop(busID)) {
                //encontrar o resto do percurso
                busStops.get(i).getBusRoute(busID, route);
                break;
            }
        }


        //mostra no grafo o trajecto encontrado
        mg.resetEdges();

        for (int i = 1; i < route.size(); i++) {
            mg.addEdge(route.get(i - 1), route.get(i));
        }

    }

    /**
     * Actualiza a informação do horário de uma paragem já existente
     * @param busStopID: id da paragem a actualizar
     * @param busID: id do autocarro cujo horário se pretende actualizar
     * @param bsi: informação do horário
     */
    public static void addBusStopInfo(String busStopID, String busID, BusStopInfo bsi) {

        for (int i = 0; i < busStops.size(); i++) {
            if (busStops.get(i).getName().equals(busStopID)) {

                busStops.get(i).addBusStopInfo(busID, bsi);
                return;
            }
        }

        System.out.println("ERRO: Paragem '" + busStopID + "' não encontrada.");
        System.exit(1);
    }

    /**
     * Actualiza o nome do autocarro busID, dando-lhe o nome da paragem terminal como sufixo
     * 804 -> 804-S.João
     * @param busID nome do autocarro
     * @param busTerminal sufixo
     */
    public static void fixBusName(String busID, String busTerminal) {

        for (int i = 0; i < busStops.size(); i++) {
            busStops.get(i).fixBusName(busID, busID + "-" + busTerminal);
        }
    }


    /**
     * Inicializa o grafo e respectivos vertices e arestas
     */
    public void initGraph() {
        mg.init();

        //adicionar vertices
        for (int i = 0; i < busStops.size(); i++) {
            mg.addVertex(busStops.get(i).getName(), busStops.get(i).getXCoord(), busStops.get(i).getYCoord());
        }

        //adicionar arestas
        for (int i = 0; i < busStops.size(); i++) {
            String origin = busStops.get(i).getName();
            Vector<String> neighbors = busStops.get(i).getNeighbors();

            for (int j = 0; j < neighbors.size(); j++) {
                mg.addEdge(origin, neighbors.get(j));
            }
        }
        jgraph = mg.getJGraph();

    }

    

    /**
     * Imprime as frames
     */
    public static void printFrames() {
        for (int i = 0; i < busStops.size(); i++) {
            busStops.get(i).printFrame();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
