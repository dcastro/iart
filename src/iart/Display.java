/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Display.java
 *
 * Created on 11/Abr/2011, 15:38:02
 */

package iart;

import java.text.DecimalFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.jgraph.JGraph;

/**
 *
 * @author Diogo
 */
public class Display extends javax.swing.JFrame {
    
    public double ticket_price;
    public double scale = 50; //50px - 1km

    public static Vector<BusStop> busStops = new Vector<BusStop>();
    public static Vector<String> buses = new Vector<String>();
    public static MyGraph mg = new MyGraph();
    public static JGraph jgraph;
    public static heuristicMode mode = heuristicMode.DISTANCE;
    public static Vector<Node> path = new Vector<Node>();

    public static Boolean graphInitialized = false;

    /** Creates new form Display */
    public Display() {

        Config c = new Config();
        c.load();
        printFrames();

        //graph
        initGraph();

        initComponents();

        graphInitialized = true;
        
      /*  System.out.println("---------------------");
        Node n = new Node(busStops.get(0), new StopSchedule(10, 0));
        Vector<Node> path = aStar.aStarAlgorithm(n, busStops.get(busStops.size()-3));
        
        System.out.println("---------------------");
        System.out.println("");
        System.out.println("de: "+ busStops.get(0).getName()+" ate: "+busStops.get(busStops.size()-3).getName());
        System.out.println("Size: "+path.size());
        System.out.println("Caminho: "+path.get(0).getBusStop().getName());
        System.out.println("");*/
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Mode_ButtonGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane(jgraph);
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("STCP");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = buses.toArray(new String[0]);//{ "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jLabel1.setText("Autocarros:");

        jButton2.setText("Visualizar Rota");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Ver todas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Modo");

        Mode_ButtonGroup.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Menor distancia (m)");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        Mode_ButtonGroup.add(jRadioButton2);
        jRadioButton2.setText("Menor tempo de viagem");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        Mode_ButtonGroup.add(jRadioButton3);
        jRadioButton3.setText("Menor n√∫mero de transbordos");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(
            //new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }
            getBusStops()
        ));

        jLabel3.setText("Origem");

        jLabel4.setText("Destino");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(
            getBusStops()
            //new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }
        )
    );

    jLabel5.setText("Hora da Partida");

    jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

    jSpinner2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

    jLabel6.setText(":");

    jButton3.setText("Pesquisar");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            /*{null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null},
            {null, null, null, null, null}*/
        },
        new String [] {
            "Paragem", "T. Espera (mins)", "Partida", "Chegada", "Autocarro"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }
    });
    jTable1.setEnabled(false);
    jScrollPane3.setViewportView(jTable1);

    jTextArea1.setColumns(20);
    jTextArea1.setRows(5);
    jScrollPane4.setViewportView(jTextArea1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(46, 46, 46)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jRadioButton3)
                        .addComponent(jLabel1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(43, 43, 43)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton2)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jButton1))))
                        .addComponent(jLabel2)
                        .addComponent(jRadioButton2)
                        .addComponent(jRadioButton1)))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(53, 53, 53)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(49, 49, 49)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel5)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(133, 133, 133)
                            .addComponent(jButton3)))
                    .addGap(32, 32, 32)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButton1))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(23, 23, 23)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jRadioButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jRadioButton2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jRadioButton3)))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(39, 39, 39)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6))))
                    .addGap(52, 52, 52)
                    .addComponent(jButton3))
                .addGroup(layout.createSequentialGroup()
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, 0, 0, Short.MAX_VALUE))))
            .addGap(21, 21, 21))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:        
        displayRoute(jList1.getAnchorSelectionIndex());
        System.out.println("Selected Bus no.: " + jList1.getAnchorSelectionIndex());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        displayRoute(-1);
        System.out.println("Displaying all routes.");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        mode = heuristicMode.DISTANCE;
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
        mode = heuristicMode.COST;
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        mode = heuristicMode.TIME;
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.out.println(jComboBox1.getSelectedIndex());
        int origem = jComboBox1.getSelectedIndex();
        int destino = jComboBox2.getSelectedIndex();
        int hora = (int) jSpinner1.getValue();
        int min = (int) jSpinner2.getValue();
        
        if(origem == destino) {
            jTextArea1.setText("Erro: destino igual a origem.");
            return;
        }
        
        //jTable1.setValueAt("picas", 2, 2);

        //((DefaultTableModel )jTable1.getModel()).getRowCount();
        //((DefaultTableModel )jTable1.getModel()).insertRow(2, new Vector());
        //jTable1.setValueAt("lol", 2, 6);
        
        Node n = new Node(busStops.get(origem), new StopSchedule(hora, min));
        path = aStar.aStarAlgorithm(n, busStops.get(destino));

        //apaga a tabela
        ((DefaultTableModel )jTable1.getModel()).setRowCount(0);

        //preenche a tabela
        for(int i= path.size()-1; i >= 0; i--) {
            
            //tempo de partida da paragem, chegada a' proxima e autocarro a apanhar
            String arrival = "-";// = path.get(i).getArrivalTime().toString();
            String bus = "-";
            String departure = "-";
            if(i-1 >= 0) {
                arrival = path.get(i-1).getArrivalTime().toString();
                bus = path.get(i-1).getBus();
                departure = path.get(i-1).departure.toString();
            }
            
            int waiting_time = 0;
            if(i == path.size()-1)
                waiting_time = StopSchedule.diff(new StopSchedule(hora, min), path.get(i-1).departure); 
            else if(i != 0)
                waiting_time = StopSchedule.diff(path.get(i-1).departure, path.get(i).arrival);
            
            //insere linha na tabela
            ((DefaultTableModel )jTable1.getModel()).insertRow(path.size()-1 - i, new Object[] {
                path.get(i).bstop.getName(),
                waiting_time,
                departure,
                arrival,
                bus}
                    
                    );
        }
        
        //calculo da distancia total percorrida e tempo total da viagem
        int time_diff = StopSchedule.diff(new StopSchedule(hora, min), path.get(0).arrival);
        DecimalFormat df = new DecimalFormat("#########.###");
        double dist = path.get(0).dist/scale;
        
        jTextArea1.setText("Dura√ß√£o total da viagem: " + time_diff/60 + ":" + (time_diff - ((int)(time_diff/60)) * 60) + "\n"+
                "Distancia total percorrida: " + df.format(dist));

        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display().setVisible(true);
            }
        });
        
        jgraph = mg.getJGraph();
        //espera que o display (interface, grafo, etc) seja inicializado
        while (!graphInitialized) {
            
        }

        /**
         * Testa Geracao de nos sucessores
         */
        /*
        Node n = new Node(busStops.get(3), new StopSchedule(11,0));
        System.out.println("ROOT: " + busStops.get(3).getName());
        Vector<Node> nodes = n.expand();
        for(int i =0; i < nodes.size(); i++) {
            System.out.print(nodes.get(i).getBusStop().getName() + "   " + nodes.get(i).getBus() + "  ");
            nodes.get(i).getArrivalTime().print();
            System.out.println();
        }*/
        
        

        

    }
    
    private String[] getBusStops() {
        Vector<String> ret = new Vector<String>();
        for(int i = 0; i < busStops.size(); i++)
            ret.add(busStops.get(i).getName());
       
        String[] ret_arr = new String[0];
        return ret.toArray(ret_arr);
    }




    /**
     * Mostra no grafo o trajecto do autocarro na posi√ß√£o 'index'
     * Mostra todos os trajectos se index = -1
     * @param index: posi√ßao do autocarro cujo trajecto se pretende mostrar
     */
    public static void displayRoute(int index) {
        if (index < -1 || index >= buses.size()) {
            return;
        }

        if (index == -1) {
            mg.resetEdges();
            
            for (int i = 0; i < busStops.size(); i++) {
                String origin = busStops.get(i).getName();
                Vector<String> neighbors = busStops.get(i).getNeighbors();

                for (int j = 0; j < neighbors.size(); j++) {
                    mg.addEdge(origin, neighbors.get(j));
                }

            }
            return;
        }

        String busID = buses.get(index);
        Vector<String> route = new Vector<String>();

        //encontrar o ponto de partida do autocarro
        for (int i = 0; i < busStops.size(); i++) {
            if (busStops.get(i).isBusFirstStop(busID)) {
                //encontrar o resto do percurso
                busStops.get(i).getBusRoute(busID, route);
                break;
            }
        }


        //mostra no grafo o trajecto encontrado
        mg.resetEdges();

        for (int i = 1; i < route.size(); i++) {
            mg.addEdge(route.get(i - 1), route.get(i));
        }

    }

    /**
     * Actualiza a informa√ß√£o do hor√°rio de uma paragem j√° existente
     * @param busStopID: id da paragem a actualizar
     * @param busID: id do autocarro cujo hor√°rio se pretende actualizar
     * @param bsi: informa√ß√£o do hor√°rio
     */
    public static void addBusStopInfo(String busStopID, String busID, BusStopInfo bsi) {

        for (int i = 0; i < busStops.size(); i++) {
            if (busStops.get(i).getName().equals(busStopID)) {

                busStops.get(i).addBusStopInfo(busID, bsi);
                return;
            }
        }

        System.out.println("ERRO: Paragem '" + busStopID + "' n√£o encontrada.");
        System.exit(1);
    }

    /**
     * Actualiza o nome do autocarro busID, dando-lhe o nome da paragem terminal como sufixo
     * 804 -> 804-S.Jo√£o
     * @param busID nome do autocarro
     * @param busTerminal sufixo
     */
    public static void fixBusName(String busID, String busTerminal) {

        for (int i = 0; i < busStops.size(); i++) {
            busStops.get(i).fixBusName(busID, busID + "-" + busTerminal);
        }
    }


    /**
     * Inicializa o grafo e respectivos vertices e arestas
     */
    public void initGraph() {
        mg.init();

        //adicionar vertices
        for (int i = 0; i < busStops.size(); i++) {
            mg.addVertex(busStops.get(i).getName(), busStops.get(i).getXCoord(), busStops.get(i).getYCoord());
        }

        //adicionar arestas
        for (int i = 0; i < busStops.size(); i++) {
            String origin = busStops.get(i).getName();
            Vector<String> neighbors = busStops.get(i).getNeighbors();

            for (int j = 0; j < neighbors.size(); j++) {
                mg.addEdge(origin, neighbors.get(j));
            }
        }
        jgraph = mg.getJGraph();

    }

    

    /**
     * Imprime as frames
     */
    public static void printFrames() {
        for (int i = 0; i < busStops.size(); i++) {
            busStops.get(i).printFrame();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Mode_ButtonGroup;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}

enum heuristicMode {
	DISTANCE, TIME, COST
}
